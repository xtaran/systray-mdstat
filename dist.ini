name = systray-mdstat
version = 1.2.1
main_module = bin/systray-mdstat
authors = Axel Beckert <abe@deuxchevaux.org>
copyright_holder = Axel Beckert

; actually the license is "GPL_3+", but Software::License currently
; does not yet support that notion (at least not upstream) and neither
; does dzil (even not in Debian with patched Software::License as it
; doesn't use Software::LicenseUtils->new_from_short_name()), see
; https://github.com/Perl-Toolchain-Gang/Software-License/issues/55
license = GPL_3

[@Filter]
-bundle = @Basic
-remove = UploadToCPAN
[ArchiveRelease]
directory = ..

[MetaJSON]
;[PodCoverageTests]
[PodSyntaxTests]

[PruneFiles]
filename = debian
filename = cover_db

[GithubMeta]

; PodWeaver needs to come before OurPkgVersion/PkgVersion/PodVersion
[PodWeaver]
[OurPkgVersion]

[FileFinder::ByName / :ScriptWithoutPL]
file = bin/systray-mdstat
[AutoPrereqs]
finder = :ScriptWithoutPL

; Test related
[TestRelease]
[Test::Perl::Critic]
[Test::Kwalitee]
; Skip tests which argue about missing things which are actually added
; by PodWeaver automatically
skiptest = has_license_in_source_file
skiptest = has_abstract_in_pod
[MojibakeTests]

; Release related
[Git::Check]
; Helps a lot testing new release workflows
allow_dirty = dist.ini
; ArchiveRelease always seems to leave a dist directory, so without
; this, a release always fails at Git::Check.
untracked_files = warn

[Run::AfterRelease]
; Built the tar ball for the Debian package. Needs to be different
; from the one uploaded to CPAN and Debian builds off the contents of
; the git repo without all the dzil-generated stuff as it builds that
; stuff at build time.
run = dh_dist_zilla_origtar
; Build a binary package in a chroot to see if all build-dependencies
; are there and for as-installed testing with autopkgtest.
run = pdebuild
; Run lintian on the full package build
run = lintian /var/cache/pbuilder/result/%n_$(dpkg-parsechangelog -SVersion)_*.changes
; sign the CPAN and the Debian tar balls
run = gpg --detach-sign -a --output ../%a.asc ../%a
run = gpg --detach-sign -a --output ../%n_%v.orig.tar.xz.asc ../%n_%v.orig.tar.xz
; Build a source package for upload to Debian
run = debuild -S
; Clean up built artifacts
run = debclean
; Tag the Debian package release, too.
run = gbp buildpackage --git-tag-only

[Git::Tag]
; I prefer the sole vesion number as tag.
tag_format  = %V
; Of course we want a sentence as message, not the just the version
; number again.
tag_message = Release as %V
signed = 1
